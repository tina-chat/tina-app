# PRD-03: Multi-Chat Management

## User Value Proposition
Enable users to organize their AI interactions into separate, manageable conversations with automatic titling, easy navigation, and full chat lifecycle management.

## User Stories (Vertical Slices)
- As a user, I want to create new chats for different topics so that I can keep conversations organized
- As a user, I want to see a list of all my chats so that I can quickly find past conversations
- As a user, I want chats to have meaningful titles so that I know what each conversation is about
- As a user, I want to rename and delete chats so that I can manage my conversation history
- As a user, I want to switch between chats quickly so that I can multitask effectively

## Success Criteria
- User can create unlimited new chats
- Chat list shows all conversations with preview
- Automatic title generation from first messages
- Manual rename functionality
- Delete chat with confirmation
- Quick switch between active chats
- Visual indicator for current chat
- Chat list sorted by last activity
- Empty state for no chats
- Swipe actions for quick operations

## Technical Requirements

### Core Components
```yaml
packages/features/chat_management/:
  - ui/chat_list_screen.dart      # List of all chats
  - ui/chat_list_item.dart        # Individual chat preview
  - ui/new_chat_dialog.dart       # New chat creation
  - ui/chat_drawer.dart            # Side navigation drawer
  - bloc/chat_list_bloc.dart      # Chat list state management
  
packages/domain/chat_domain/:
  - use_cases/create_chat.dart    # Create chat use case
  - use_cases/delete_chat.dart    # Delete chat use case
  - use_cases/rename_chat.dart    # Rename chat use case
  - use_cases/generate_title.dart # Auto-title generation
```

### Updated Database Schema
```sql
-- Already exists from PRD-02
CREATE TABLE chats (
  id TEXT PRIMARY KEY,
  title TEXT NOT NULL,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  last_message_at INTEGER,        -- New field
  message_count INTEGER DEFAULT 0  -- New field
);

-- Add new index for sorting
CREATE INDEX idx_chats_last_message ON chats(last_message_at DESC);
```

### State Management
```dart
class ChatListState {
  final List<ChatSummary> chats;
  final String? activeChat;
  final bool isLoading;
}

class ChatSummary {
  final String id;
  final String title;
  final String lastMessage;
  final DateTime lastActivity;
  final int messageCount;
}
```

### Title Generation Logic
```dart
class GenerateTitleUseCase {
  Future<String> execute(List<Message> messages) async {
    // Use first 3 messages to generate title
    final context = messages.take(3).map((m) => m.content).join(' ');
    
    // Simple extraction or AI-based generation
    return _extractTitle(context) ?? 'New Chat';
  }
}
```

## Implementation Plan

### Week 1: Chat List UI
1. Create chat list screen
2. Implement chat list items with previews
3. Add navigation drawer/bottom sheet
4. Build new chat dialog
5. Connect to existing chat screen

### Week 2: Management Features
1. Implement create/delete/rename operations
2. Add automatic title generation
3. Implement chat switching
4. Add swipe actions
5. Test with multiple chats

## Out of Scope (for this PRD)
- Chat folders/categories
- Chat archiving
- Bulk operations
- Chat templates
- Shared chats
- Chat merging
- Advanced sorting options
- Chat pinning

## Dependencies
- PRD-01 (Basic Chat) complete
- PRD-02 (Persistence) complete
- Database schema extended

## What This Enables for Future PRDs
- Context for provider switching (PRD-04)
- Multiple chats for search (PRD-05)
- Chat-specific workflows (PRD-06)
- Per-chat permissions (PRD-07)

## Acceptance Tests
1. **Create Chat Test**: New chat button → Chat created → Redirected to chat
2. **List Display Test**: 5 chats created → All visible in list with previews
3. **Auto Title Test**: Send messages → Title generated automatically
4. **Rename Test**: Long press chat → Rename → New title saved
5. **Delete Test**: Swipe to delete → Confirmation → Chat removed
6. **Switch Test**: Tap different chat → Current chat changes
7. **Sort Test**: Send message in old chat → Moves to top of list

## UI/UX Requirements
- Material Design 3 components
- Smooth animations for transitions
- Pull-to-refresh on chat list
- Search bar for finding chats (visual only)
- Long press for context menu
- Swipe gestures for quick actions
- Empty state illustration
- Loading states for operations

## Definition of Done
- [ ] Chat list screen implemented
- [ ] Create new chat functionality
- [ ] Automatic title generation
- [ ] Rename chat capability
- [ ] Delete chat with confirmation
- [ ] Navigation between chats
- [ ] Chat previews in list
- [ ] Sorting by last activity
- [ ] Swipe actions implemented
- [ ] Empty state handled
- [ ] Unit tests for use cases
- [ ] Widget tests for UI components