# PRD-02: Chat Persistence & History

## User Value Proposition
Ensure users never lose their conversations by implementing local storage that persists chat history between app sessions, making the AI assistant a reliable long-term companion.

## User Stories (Vertical Slices)
- As a user, I want my conversations to be saved automatically so that I don't lose important information
- As a user, I want to see my chat history when I reopen the app so that I can continue where I left off
- As a user, I want my messages to be stored securely on my device so that my privacy is protected
- As a user, I want the app to remember my last conversation state so that I can seamlessly resume

## Success Criteria
- All messages persist to local SQLite database immediately
- Chat history loads on app restart
- Messages maintain proper order and timestamps
- Database handles 10,000+ messages efficiently
- Conversation state restored (scroll position, last message)
- No data loss on app crash or force close
- Database migrations work smoothly
- Storage cleanup for old messages (configurable)
- Offline-first architecture established

## Technical Requirements

### Core Components
```yaml
packages/infrastructure/database/:
  tina_database/:
    - database.dart                # Drift database configuration
    - tables/messages.dart         # Message table definition
    - tables/chats.dart            # Chat table definition
    - dao/message_dao.dart         # Message data access
    - dao/chat_dao.dart            # Chat data access
    - migrations/v1.dart           # Initial schema

packages/domain/chat_domain/:
  - repositories/chat_repository.dart  # Repository interface
  - entities/chat.dart                 # Chat entity
  - entities/message.dart              # Message entity
```

### Dependencies
```yaml
dependencies:
  drift: ^2.14.1                   # Type-safe SQLite
  sqlite3_flutter_libs: ^0.5.15   # Native SQLite
  path_provider: ^2.1.1            # Database path
  path: ^1.8.3                     # Path manipulation
```

### Database Schema
```sql
CREATE TABLE chats (
  id TEXT PRIMARY KEY,
  title TEXT NOT NULL,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL
);

CREATE TABLE messages (
  id TEXT PRIMARY KEY,
  chat_id TEXT NOT NULL,
  role TEXT NOT NULL,
  content TEXT NOT NULL,
  status TEXT NOT NULL,
  created_at INTEGER NOT NULL,
  FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE
);

CREATE INDEX idx_messages_chat_id ON messages(chat_id);
CREATE INDEX idx_messages_created_at ON messages(created_at);
```

### Repository Pattern
```dart
abstract class ChatRepository {
  Future<void> saveMessage(Message message);
  Future<List<Message>> getMessages(String chatId);
  Future<void> createChat(Chat chat);
  Future<Chat?> getActiveChat();
  Stream<List<Message>> watchMessages(String chatId);
}

class DriftChatRepository implements ChatRepository {
  final TinaDatabase _database;
  
  @override
  Future<void> saveMessage(Message message) async {
    await _database.messageDao.insertMessage(message.toData());
  }
  
  @override
  Stream<List<Message>> watchMessages(String chatId) {
    return _database.messageDao.watchMessagesForChat(chatId);
  }
}
```

## Implementation Plan

### Week 1: Database Setup
1. Set up Drift database package
2. Define table schemas
3. Create DAOs for data access
4. Implement repository pattern
5. Add database migrations

### Week 2: Integration & Testing
1. Connect database to chat bloc
2. Implement message persistence
3. Add chat restoration on startup
4. Test with large datasets
5. Add data cleanup strategies

## Out of Scope (for this PRD)
- Cloud sync/backup
- Export functionality
- Full-text search
- Message encryption
- Multi-device sync
- Chat sharing
- Advanced indexing (FTS5)

## Dependencies
- PRD-01 (Basic Chat) must be complete
- SQLite available on target platforms
- Storage permissions configured

## What This Enables for Future PRDs
- Foundation for multi-chat (PRD-03)
- Data source for search (PRD-05)
- Persistence for provider settings (PRD-04)
- Base for export functionality (PRD-05)

## Acceptance Tests
1. **Persistence Test**: Send message → Force close app → Reopen → Message visible
2. **Order Test**: Send 10 messages → Restart → Correct order maintained
3. **Performance Test**: Load chat with 1000 messages in < 1 second
4. **Crash Recovery**: Kill app mid-message → Reopen → No data corruption
5. **Migration Test**: Update schema → Existing data preserved
6. **Cleanup Test**: Old messages removed based on settings

## Performance Requirements
- Initial load: < 500ms for 100 messages
- Message save: < 50ms
- Database size: Efficient compression
- Memory usage: < 20MB for database operations
- Query performance: < 100ms for common queries

## Definition of Done
- [ ] Database schema implemented
- [ ] Messages persist automatically
- [ ] Chat history loads on startup
- [ ] Repository pattern implemented
- [ ] Database migrations tested
- [ ] Performance benchmarks met
- [ ] Error handling for storage failures
- [ ] Unit tests for database operations
- [ ] Integration tests for persistence flow