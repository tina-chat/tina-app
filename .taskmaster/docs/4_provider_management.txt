# PRD-04: AI Provider Configuration & Management

## User Value Proposition
Give users flexibility to choose and configure their preferred AI providers, manage API keys securely, and switch between different models based on their needs and budget.

## User Stories (Vertical Slices)
- As a user, I want to add multiple AI providers so that I can choose the best one for each task
- As a user, I want to securely store my API keys so that I don't have to re-enter them
- As a user, I want to switch between providers easily so that I can compare responses
- As a user, I want to select different models so that I can balance cost and quality
- As a user, I want to test my API connections so that I know they work before using them

## Success Criteria
- Support for multiple providers (OpenAI, Anthropic, Gemini, OpenRouter)
- Secure API key storage with encryption
- Provider selection per chat or globally
- Model selection within each provider
- Connection testing with clear feedback
- Cost estimation display
- Provider status indicators
- Default provider setting
- Quick provider switching
- API key validation

## Technical Requirements

### Core Components
```yaml
packages/features/provider_management/:
  - ui/provider_settings_screen.dart  # Main settings screen
  - ui/provider_card.dart             # Individual provider config
  - ui/model_selector.dart             # Model selection dropdown
  - ui/api_key_input.dart              # Secure key input field
  - bloc/provider_bloc.dart           # Provider state management

packages/infrastructure/providers/:
  - anthropic_provider/                # Anthropic Claude
  - gemini_provider/                   # Google Gemini
  - openrouter_provider/               # OpenRouter proxy
  - provider_factory.dart              # Provider instantiation
  - provider_registry.dart             # Available providers

packages/infrastructure/security/:
  - credential_vault.dart              # Secure storage wrapper
  - encryption_service.dart            # Key encryption
```

### Dependencies
```yaml
dependencies:
  flutter_secure_storage: ^9.0.0   # Encrypted storage
  envied: ^0.5.2                    # Environment variables
```

### Database Schema Extension
```sql
CREATE TABLE providers (
  id TEXT PRIMARY KEY,
  type TEXT NOT NULL,              -- openai, anthropic, gemini, openrouter
  name TEXT NOT NULL,
  is_active BOOLEAN DEFAULT FALSE,
  is_default BOOLEAN DEFAULT FALSE,
  created_at INTEGER NOT NULL
);

CREATE TABLE credentials (
  id TEXT PRIMARY KEY,
  provider_id TEXT NOT NULL,
  encrypted_key TEXT NOT NULL,
  last_tested_at INTEGER,
  is_valid BOOLEAN,
  FOREIGN KEY (provider_id) REFERENCES providers(id) ON DELETE CASCADE
);

CREATE TABLE provider_configs (
  id TEXT PRIMARY KEY,
  provider_id TEXT NOT NULL,
  model TEXT NOT NULL,
  max_tokens INTEGER,
  temperature REAL,
  config_json TEXT,                -- Provider-specific settings
  FOREIGN KEY (provider_id) REFERENCES providers(id) ON DELETE CASCADE
);
```

### Provider Interface
```dart
abstract class AIProvider {
  String get id;
  String get name;
  List<String> get availableModels;
  
  Future<bool> testConnection(String apiKey);
  Future<Stream<String>> streamCompletion(
    List<Message> messages,
    String model,
    Map<String, dynamic> config,
  );
  
  double estimateCost(int inputTokens, int outputTokens, String model);
}

class ProviderFactory {
  static AIProvider create(ProviderType type, String apiKey) {
    switch (type) {
      case ProviderType.openai:
        return OpenAIProvider(apiKey);
      case ProviderType.anthropic:
        return AnthropicProvider(apiKey);
      case ProviderType.gemini:
        return GeminiProvider(apiKey);
      case ProviderType.openrouter:
        return OpenRouterProvider(apiKey);
    }
  }
}
```

### Secure Storage
```dart
class CredentialVault {
  final FlutterSecureStorage _storage;
  
  Future<void> storeApiKey(String providerId, String apiKey) async {
    final encrypted = await _encrypt(apiKey);
    await _storage.write(
      key: 'provider_$providerId',
      value: encrypted,
    );
  }
  
  Future<String?> getApiKey(String providerId) async {
    final encrypted = await _storage.read(key: 'provider_$providerId');
    return encrypted != null ? await _decrypt(encrypted) : null;
  }
}
```

## Implementation Plan

### Week 1: Provider Infrastructure
1. Create provider interface and base classes
2. Implement OpenAI and Anthropic providers
3. Set up secure credential storage
4. Build provider factory and registry
5. Add connection testing

### Week 2: UI and Integration
1. Build provider settings screen
2. Create provider configuration cards
3. Implement model selection
4. Add provider switching in chat
5. Test with multiple providers

## Out of Scope (for this PRD)
- Custom/local LLM support
- Provider usage analytics
- Cost tracking history
- Rate limit management
- Proxy configuration
- Provider comparison tools
- Batch API support
- Fine-tuned models

## Dependencies
- PRD-01, PRD-02, PRD-03 complete
- API keys for testing
- Secure storage available

## What This Enables for Future PRDs
- Multiple backends for orchestrators (PRD-06)
- Provider-specific tools (PRD-07)
- Cost controls in workflows (PRD-08)
- Provider performance metrics (PRD-09)

## Acceptance Tests
1. **Add Provider Test**: Add OpenAI → Enter API key → Test connection → Success
2. **Switch Provider Test**: Chat with OpenAI → Switch to Anthropic → Continue chat
3. **Invalid Key Test**: Enter bad key → Test fails → Clear error message
4. **Model Selection Test**: Select GPT-4 → Chat uses selected model
5. **Secure Storage Test**: Add key → Restart app → Key still works
6. **Multi-Provider Test**: Configure 3 providers → All available in chat

## Security Requirements
- API keys never logged or displayed in plain text
- Encrypted storage using platform secure storage
- Keys isolated per provider
- Optional biometric protection
- Clear data option in settings
- No keys in code or version control

## Definition of Done
- [ ] Provider interface defined
- [ ] 4 providers implemented (OpenAI, Anthropic, Gemini, OpenRouter)
- [ ] Secure credential storage
- [ ] Provider settings UI
- [ ] Model selection per provider
- [ ] Connection testing functionality
- [ ] Provider switching in chat
- [ ] Cost estimation display
- [ ] Error handling for API failures
- [ ] Unit tests for providers
- [ ] Integration tests for switching