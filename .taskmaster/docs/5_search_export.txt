# PRD-05: Search & Data Management

## User Value Proposition
Enable users to quickly find information across all conversations and export their data in various formats, ensuring they have full control and portability of their AI interactions.

## User Stories (Vertical Slices)
- As a user, I want to search across all my chats so that I can find specific information quickly
- As a user, I want to export conversations so that I can share or backup my data
- As a user, I want to import previous conversations so that I can restore my history
- As a user, I want to search within a specific chat so that I can find messages easily
- As a user, I want multiple export formats so that I can use my data in different applications

## Success Criteria
- Full-text search across all messages in < 100ms
- Search results highlighted with context
- Export to JSON, Markdown, and plain text
- Import from JSON format
- Search filters (date, chat, role)
- Search history/recent searches
- Bulk export of multiple chats
- Selective message export
- Progress indicators for large operations
- Search results pagination

## Technical Requirements

### Core Components
```yaml
packages/features/search/:
  - ui/search_screen.dart          # Global search interface
  - ui/search_results.dart         # Results display
  - ui/search_filters.dart         # Filter options
  - bloc/search_bloc.dart          # Search state management

packages/features/data_management/:
  - ui/export_dialog.dart          # Export options UI
  - ui/import_screen.dart          # Import interface
  - services/export_service.dart   # Export logic
  - services/import_service.dart   # Import logic
  - formatters/json_formatter.dart # JSON export
  - formatters/markdown_formatter.dart # Markdown export
```

### Database Enhancement
```sql
-- Add FTS5 virtual table for full-text search
CREATE VIRTUAL TABLE messages_fts USING fts5(
  content,
  content=messages,
  content_rowid=id
);

-- Triggers to keep FTS in sync
CREATE TRIGGER messages_ai AFTER INSERT ON messages BEGIN
  INSERT INTO messages_fts(rowid, content) VALUES (new.id, new.content);
END;

CREATE TRIGGER messages_au AFTER UPDATE ON messages BEGIN
  UPDATE messages_fts SET content = new.content WHERE rowid = new.id;
END;

CREATE TRIGGER messages_ad AFTER DELETE ON messages BEGIN
  DELETE FROM messages_fts WHERE rowid = old.id;
END;
```

### Search Implementation
```dart
class SearchService {
  final TinaDatabase _database;
  
  Future<List<SearchResult>> search(String query, SearchFilters filters) async {
    // Use FTS5 for fast full-text search
    final results = await _database.customSelect(
      '''
      SELECT m.*, c.title as chat_title,
        snippet(messages_fts, -1, '<mark>', '</mark>', '...', 20) as snippet
      FROM messages m
      JOIN messages_fts ON m.id = messages_fts.rowid
      JOIN chats c ON m.chat_id = c.id
      WHERE messages_fts MATCH ?
      ${_buildFilterClause(filters)}
      ORDER BY rank
      LIMIT 50 OFFSET ?
      ''',
      variables: [query, filters.offset],
    ).get();
    
    return results.map((r) => SearchResult.fromRow(r)).toList();
  }
}
```

### Export Service
```dart
class ExportService {
  Future<String> exportChat(Chat chat, ExportFormat format) async {
    final messages = await _getMessages(chat.id);
    
    switch (format) {
      case ExportFormat.json:
        return JsonFormatter.format(chat, messages);
      case ExportFormat.markdown:
        return MarkdownFormatter.format(chat, messages);
      case ExportFormat.text:
        return PlainTextFormatter.format(chat, messages);
    }
  }
  
  Future<File> exportToFile(Chat chat, ExportFormat format) async {
    final content = await exportChat(chat, format);
    final fileName = '${chat.title}_${DateTime.now().toIso8601String()}.${format.extension}';
    final file = File('${await _getExportPath()}/$fileName');
    await file.writeAsString(content);
    return file;
  }
}
```

### Import Service
```dart
class ImportService {
  Future<ImportResult> importFromJson(String jsonContent) async {
    try {
      final data = json.decode(jsonContent);
      final chat = Chat.fromJson(data['chat']);
      final messages = (data['messages'] as List)
        .map((m) => Message.fromJson(m))
        .toList();
      
      // Create chat and messages in database
      await _database.transaction(() async {
        await _createChat(chat);
        for (final message in messages) {
          await _createMessage(message);
        }
      });
      
      return ImportResult.success(chat.id);
    } catch (e) {
      return ImportResult.error(e.toString());
    }
  }
}
```

## Implementation Plan

### Week 1: Search Implementation
1. Add FTS5 to database
2. Implement search service
3. Build search UI
4. Add search filters
5. Test search performance

### Week 2: Export/Import
1. Create export formatters
2. Build export dialog
3. Implement import service
4. Add file handling
5. Test with various formats

## Out of Scope (for this PRD)
- Cloud backup/sync
- Automated backups
- Search suggestions/autocomplete
- Advanced query syntax
- PDF export
- CSV export
- Encrypted exports
- Incremental backup

## Dependencies
- PRD-01-04 complete
- FTS5 SQLite extension available
- File system access permissions

## What This Enables for Future PRDs
- Data portability for migrations
- Backup before major operations
- Sharing workflows (PRD-08)
- Compliance/audit trails

## Acceptance Tests
1. **Search Test**: Type "flutter" → Results appear in < 100ms
2. **Filter Test**: Search with date filter → Only recent results
3. **Export Test**: Export chat to Markdown → Valid .md file created
4. **Import Test**: Import JSON → Chat restored with all messages
5. **Bulk Export Test**: Select 5 chats → All exported to zip
6. **Search Highlight Test**: Search term highlighted in results

## Performance Requirements
- Search latency: < 100ms for 10k messages
- Export time: < 5s for 1000 messages
- Import time: < 10s for 1000 messages
- Memory usage: < 50MB during operations
- File size: Efficient compression for exports

## Definition of Done
- [ ] FTS5 search implemented
- [ ] Search UI with filters
- [ ] JSON export/import working
- [ ] Markdown export working
- [ ] Plain text export working
- [ ] File sharing capability
- [ ] Progress indicators for long operations
- [ ] Search results pagination
- [ ] Error handling for malformed imports
- [ ] Unit tests for formatters
- [ ] Integration tests for search
- [ ] Performance benchmarks met