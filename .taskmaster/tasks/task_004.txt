# Task ID: 4
# Title: Build OpenAI Provider Integration
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Implement OpenAI API client with streaming support for real-time chat responses
# Details:
Create lib/infrastructure/providers/openai/openai_client.dart using Dio for HTTP requests. Implement streamChat method that sends POST to https://api.openai.com/v1/chat/completions with stream:true. Handle Server-Sent Events using dio.responseStream. Create lib/infrastructure/providers/openai/streaming_handler.dart to parse SSE data chunks and emit partial responses. Include proper error handling for network issues, API limits, and malformed responses.

# Test Strategy:
Integration tests with mock OpenAI responses, unit tests for SSE parsing, error handling for various API error codes, and timeout scenarios

# Subtasks:
## 1. Create OpenAI client class with Dio configuration [pending]
### Dependencies: None
### Description: Set up the basic OpenAI client class with Dio HTTP client configuration, including base URL, headers, and authentication setup
### Details:
Create lib/infrastructure/providers/openai/openai_client.dart with OpenAIClient class. Configure Dio instance with base URL (https://api.openai.com/v1), proper headers including Authorization bearer token, content-type application/json, and timeout settings. Add constructor to accept API key parameter.

## 2. Implement basic chat completion API call structure [pending]
### Dependencies: 4.1
### Description: Create the foundation for chat completion requests with proper request formatting and basic response handling
### Details:
Implement chatCompletion method in OpenAIClient that constructs proper request body with model, messages array, and other parameters. Create request/response model classes for OpenAI API format. Handle basic HTTP POST to /chat/completions endpoint without streaming.

## 3. Add streaming support with Server-Sent Events handling [pending]
### Dependencies: 4.2
### Description: Extend the client to support streaming responses using Dio's response stream capabilities
### Details:
Implement streamChat method that sends POST request with stream:true parameter. Use dio.responseStream to handle streaming response. Set up proper stream subscription and manage connection lifecycle including cleanup on cancellation.

## 4. Create streaming response parser for SSE data chunks [pending]
### Dependencies: 4.3
### Description: Build dedicated handler to parse Server-Sent Events data and extract message chunks
### Details:
Create lib/infrastructure/providers/openai/streaming_handler.dart with StreamingHandler class. Parse SSE format (data: prefix, JSON content, [DONE] termination). Extract delta content from OpenAI response format and emit partial message updates as Stream<String>.

## 5. Implement comprehensive error handling for various API scenarios [pending]
### Dependencies: 4.4
### Description: Add robust error handling for network issues, API rate limits, authentication failures, and malformed responses
### Details:
Create custom exception classes for different error types (NetworkException, ApiLimitException, AuthenticationException, ParseException). Implement try-catch blocks with specific error detection based on HTTP status codes (401, 429, 500, etc.) and response content. Add retry logic for transient failures.

## 6. Add proper request/response models for OpenAI API [pending]
### Dependencies: 4.2
### Description: Create comprehensive data models for OpenAI API request and response structures with proper serialization
### Details:
Create models for ChatCompletionRequest (model, messages, stream, temperature, etc.), ChatCompletionResponse, Message, Choice, and Delta objects. Add json_annotation and generate serialization code. Ensure models handle both streaming and non-streaming response formats.

## 7. Create integration tests with mock responses and error scenarios [pending]
### Dependencies: 4.5, 4.6
### Description: Develop comprehensive test suite covering successful requests, streaming responses, and various error conditions
### Details:
Create test files for OpenAIClient and StreamingHandler. Mock Dio responses for successful chat completion, streaming data chunks, authentication errors, rate limiting, and network failures. Test stream cancellation, proper resource cleanup, and error propagation throughout the integration.

