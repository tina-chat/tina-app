name: tina_workspace
publish_to: none
environment:
  sdk: ^3.9.0

workspace:
  - apps/tina_app
  - packages/tina_ui
  - widgetbook

dev_dependencies:
  dependency_validator: ^3.2.3
  import_sorter: ^4.6.0
  melos: ^7.1.0
  very_good_analysis: ^10.0.0

melos:
  name: tina_workspace

  categories:
    app:
      - "apps/**"
    packages:
      - "packages/**"

  command:
    bootstrap:
      runPubGetInParallel: true

  scripts:
    # Quality Assurance Scripts
    analyze:
      run: melos exec -- "flutter analyze --fatal-infos"
      description: Analyze all packages with strict warnings

    format:
      run: melos exec -- "dart format . --set-exit-if-changed"
      description: Check code formatting (CI mode)

    format:fix:
      run: melos exec -- "dart format ."
      description: Fix code formatting

    # Testing Scripts
    test:
      run: melos exec --dir-exists=test -- "flutter test --coverage --reporter=expanded"
      description: Run tests for all packages with coverage

    test:unit:
      run: melos exec --dir-exists=test/unit -- "flutter test test/unit --coverage"
      description: Run unit tests only

    test:widget:
      run: melos exec --dir-exists=test/widget -- "flutter test test/widget --coverage"
      description: Run widget tests only

    test:integration:
      run: melos exec --dir-exists=test/integration -- "flutter test test/integration"
      description: Run integration tests only

    # Build Scripts
    build:
      run: melos exec --depends-on="flutter" -- "flutter build apk --debug"
      description: Build debug APK for all Flutter packages

    build:release:
      run: melos exec --depends-on="flutter" -- "flutter build apk --release"
      description: Build release APK for all Flutter packages

    build:web:
      run: melos exec --depends-on="flutter" -- "flutter build web"
      description: Build web version for all Flutter packages

    # Code Generation Scripts
    generate:
      run: melos exec --depends-on="build_runner" -- "dart run build_runner build --delete-conflicting-outputs"
      description: Run code generation for all packages

    generate:watch:
      run: melos exec --depends-on="build_runner" -- "dart run build_runner watch --delete-conflicting-outputs"
      description: Run code generation in watch mode

    # Dependency Management
    pub-get:
      run: melos exec -- "flutter pub get"
      description: Run pub get for all packages

    clean:
      run: melos exec -- "flutter clean"
      description: Clean all packages

    # Validation Pipeline (for CI)
    validate:
      run: |
        melos run analyze &&
        melos run format &&
        melos run test &&
        melos run build
      description: Full validation pipeline for CI/CD

    validate:quick:
      run: |
        melos run analyze &&
        melos run format
      description: Quick validation for development

    # Development Scripts
    outdated:
      run: melos exec -- "flutter pub outdated"
      description: Check for outdated dependencies

    upgrade:
      run: melos exec -- "flutter pub upgrade"
      description: Upgrade dependencies

    # Coverage Scripts
    coverage:
      run: |
        melos run test &&
        melos exec --dir-exists=coverage -- "genhtml coverage/lcov.info -o coverage/html"
      description: Generate test coverage reports

    # Maintenance Scripts
    reset:
      run: |
        melos clean &&
        melos bootstrap &&
        melos run generate
      description: Reset and regenerate all packages

    # Development Workflow Scripts
    work-on-subtask:
      run: ./scripts/work-on-subtask $MELOS_SCRIPT_ARGS
      description: Start working on a specific subtask with guided workflow

    work-branch:
      run: ./scripts/work-on-subtask $MELOS_SCRIPT_ARGS --branch
      description: Create branch and start working on subtask

    work-validate:
      run: ./scripts/work-on-subtask $MELOS_SCRIPT_ARGS --validate
      description: Work on subtask with continuous validation
